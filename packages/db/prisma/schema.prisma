// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  ANGULAR
  ASTRO
  CSS
  CPP
  GO
  HTML
  JAVA
  JAVASCRIPT
  JSON
  JSX
  PHP
  PYTHON
  SVELTE
  TSX
  TYPESCRIPT
  VUE
  YAML
}

model User {
  id   String  @id @default(cuid())
  name String?

  email         String    @unique
  emailVerified DateTime? @map("email_verified")

  image String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  snippets    Snippet[]
  collections Collection[]
  tags        Tag[]
  files       File[]

  @@map("users")
}

model Account {
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verificationtokens")
}

model Snippet {
  id          String  @id @default(uuid())
  title       String
  description String?
  slug        String  @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tags  Tag[]
  files File[]

  isFavorite Boolean @default(false) @map("is_favorite")
  isPublic   Boolean @default(false) @map("is_public")

  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String?     @map("collection_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([collectionId, slug])
  @@index([slug, userId])
  @@map("snippets")
}

model File {
  id       String   @id @default(uuid())
  name     String
  language Language
  content  String
  slug     String

  snippet   Snippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  snippetId String  @map("snippet_id")

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([slug, snippetId])
  @@index([userId, snippetId])
  @@map("files")
}

model Tag {
  id   String @id @default(uuid())
  slug String @unique

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  snippets Snippet[]

  @@index([userId, slug])
  @@map("tags")
}

model Collection {
  id    String @id @default(uuid())
  title String
  slug  String @unique

  snippets Snippet[]

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@index([slug, userId])
  @@map("collections")
}
